"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function _defineProperty(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_nonIterableSpread()}function _arrayWithoutHoles(e){if(Array.isArray(e)){for(var n=0,o=new Array(e.length);n<e.length;n++)o[n]=e[n];return o}}function _iterableToArray(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}Object.defineProperty(exports,"__esModule",{value:!0});var DEFAULT_INTERVAL=["*"],MeasurementsOfTime=Object.freeze({minute:{min:0,max:59},hour:{min:0,max:23},dayOfTheMonth:{min:1,max:31},month:{min:1,max:12},dayOfTheWeek:{min:0,max:7}}),MeasurementsOfTimeNames=Object.keys(MeasurementsOfTime).map(function(e){return e}),SimpleCharacterRegex=new RegExp(/^[0-9]{1,2}|[-*]/),AllowedWeekdays=["SUN","MON","TUE","WED","THU","FRI","SAT"],AllowedMonths=["JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC"],splitExpression=function(o){var r=o.split(" ");if(5<r.length)throw new Error("Expression given is not a valid Cronjob Timing Expression. Expected 5 or less values, got: ".concat(r.length," instead."));return o={},Object.keys(r).forEach(function(e,n){o[MeasurementsOfTimeNames[n]]=_toConsumableArray("*"!==r[e]?r[e].split(","):"*")}),o},validateExpression=function(e){if(!e)throw new Error('Missing argument: "expression".');"string"==typeof e&&(e=splitExpression(e));var n=Object.keys(e);if(5<n.length)throw new Error("Expression given is not a valid Cronjob Timing Expression. Expected 5 or less values, got: ".concat(n.length," instead."))},validateString=function(n){if(!n)throw new Error('Missing argument: "expression".');n=splitExpression(n),Object.keys(n).forEach(function(e){validateValue(e,n[e])})},validateValue=function(n,o){if(!n)throw new Error('Missing argument: "measurementOfTime".');if(!o)throw new Error('Missing argument: "value".');if(!MeasurementsOfTimeNames.includes(n))throw new Error("".concat(n," is not a valid Measurement of Time. Please try use one of these: ").concat(MeasurementsOfTimeNames.join(", ")));if("month"===n&&!AllowedMonths.includes(o)&&!SimpleCharacterRegex.test(o))throw new Error("".concat(o,' is not valid. Please use 0-9, "-", "*", ').concat(AllowedMonths.join(", ")));if("dayOfTheWeek"===n&&!AllowedWeekdays.includes(o)&&!SimpleCharacterRegex.test(o))throw new Error("".concat(o,' is not valid. Please use 0-9, "-", "*", ').concat(AllowedWeekdays.join(", ")));if("month"!==n&&"dayOfTheWeek"!==n&&!SimpleCharacterRegex.test(o))throw new Error("".concat(o,' is not a valid. Please use 0-9, "-" or "*".\''));if(isNaN(o)||(o+=""),"*"!==o||"?"!==o){if(0<=o.indexOf("-")){var e=o.split("-");if(void 0===e[0])throw new Error("Invalid range. Please specify a minimum.");if(void 0===e[1])throw new Error("Invalid range. Please specify a minimum.");if("string"!=typeof e[0]&&"string"!=typeof e[1]){if(e[0]<MeasurementsOfTime[n].min)throw new Error("".concat(e[0],' is too small for "').concat(n,'" range. Minimum value is: ').concat(MeasurementsOfTime[n].min));if(e[1]>MeasurementsOfTime[n].max)throw new Error("".concat(e[1],' is too big for "').concat(n,'" range. Maximum value is: ').concat(MeasurementsOfTime[n].max))}else{if(!AllowedWeekdays.includes(e[0]))throw AllowedMonths.includes(e[0])?new Error("".concat(e[0]," is an not allowed weekday. Please try use one of these: ").concat(AllowedWeekdays.join(", "))):new Error("".concat(e[0]," is an not allowed month. Please try use one of these: ").concat(AllowedMonths.join(", ")));if(!AllowedWeekdays.includes(e[1]))throw AllowedMonths.includes(e[1])?new Error("".concat(e[1]," is an not allowed weekday. Please try use one of these: ").concat(AllowedWeekdays.join(", "))):new Error("".concat(e[1]," is an not allowed month. Please try use one of these: ").concat(AllowedMonths.join(", ")));if(AllowedWeekdays.includes(e[0])){if(!AllowedWeekdays.includes(e[1]))throw new Error("The upper part of the range is not an valid weekday but the lower part is. Both need to be an valid weekday.");if(AllowedMonths.includes(e[1])&&!AllowedMonths.includes(e[0]))throw new Error("The lower part of the range is not an valid month but the upper part is. Both need to be an valid month.")}if(AllowedMonths.includes(e[0])){if(!AllowedMonths.includes(e[1]))throw new Error("The upper part of the range is not an valid month but the lower part is. Both need to be an valid month.");if(AllowedWeekdays.includes(e[1])&&!AllowedWeekdays.includes(e[0]))throw new Error("The lower part of the range is not an valid weekday but the upper part is. Both need to be an valid weekday.")}}}if(!o.includes(",")){if(parseInt(o)<MeasurementsOfTime[n].min)throw new Error("".concat(o,' is too small for "').concat(n,'" range. Minimum value is: ').concat(MeasurementsOfTime[n].min));if(parseInt(o)>MeasurementsOfTime[n].max)throw new Error("".concat(o,' is too big for "').concat(n,'" range. Maximum value is: ').concat(MeasurementsOfTime[n].max))}var r;!o.includes(",")||(r=o.split(",")).length&&r.forEach(function(e){if(!SimpleCharacterRegex.test(o)){if("*"===e)throw new Error('"*" is not allowed in a list.');if("month"===n&&!AllowedMonths.includes(e))throw new Error("".concat(e," is not a valid value in a list of months."));if("dayOfTheWeek"===n&&!AllowedWeekdays.includes(o))throw new Error("".concat(e," is not a valid value in a list of weekdays."));throw new Error("".concat(e," is not a valid value in a list."))}})}},CronValidator={splitExpression:splitExpression,validateExpression:validateExpression,validateString:validateString,validateValue:validateValue},CronBuilder=function e(n){var o=this;_classCallCheck(this,e),_defineProperty(this,"build",function(){return[o.expression.minute.join(","),o.expression.hour.join(","),o.expression.dayOfTheMonth.join(","),o.expression.month.join(","),o.expression.dayOfTheWeek.join(",")].join(" ")}),_defineProperty(this,"addValue",function(e,n){CronValidator.validateValue(e,n),1===o.expression[e].length&&"*"===o.expression[e][0]?o.expression[e]=[n]:o.expression[e].includes(n)||o.expression[e].push(n)}),_defineProperty(this,"removeValue",function(e,n){if(CronValidator.validateValue(e,n),1===o.expression[e].length&&"*"===o.expression[e][0])throw new Error('The default interval for "'.concat(e,'" is "*", won\'t change.'));o.expression[e]=o.expression[e].filter(function(e){return n!==e}),o.expression[e].length||(o.expression[e]=DEFAULT_INTERVAL)}),_defineProperty(this,"get",function(e){if(!o.expression[e])throw new Error("".concat(e," is not a valid Measurement of Time. Please try one of these: ").concat(MeasurementsOfTimeNames.join(", ")));return o.expression[e].join(",")}),_defineProperty(this,"getAll",function(){return o.expression}),_defineProperty(this,"set",function(n,e){if(!Array.isArray(e))throw new TypeError('Value needs to be an Array. Got "'.concat(_typeof(e),'" instead.'));return e.forEach(function(e){CronValidator.validateValue(n,e)}),o.expression[n]=e,o.expression[n].join(",")}),_defineProperty(this,"setAll",function(e){CronValidator.validateExpression(e),o.expression=e}),n?(CronValidator.validateExpression(n),this.expression=CronValidator.splitExpression(n)):this.expression={minute:DEFAULT_INTERVAL,hour:DEFAULT_INTERVAL,dayOfTheMonth:DEFAULT_INTERVAL,month:DEFAULT_INTERVAL,dayOfTheWeek:DEFAULT_INTERVAL}};module.exports=CronBuilder,exports.CronBuilder=CronBuilder,exports.CronValidator=CronValidator,exports.default=CronBuilder;
